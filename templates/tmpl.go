// Code generated by "esc -include=.*\.tmpl -o=tmpl.go -pkg=templates ./"; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/minimock/call.tmpl": {
		name:    "call.tmpl",
		local:   "minimock/call.tmpl",
		size:    236,
		modtime: 1707347174,
		compressed: `
H4sIAAAAAAAC/0yO0YrCQAxFfyWUPuxCyQcs7Af0ZVlU9DlMUw20o6RRkZB/lynV+nThzrlz4t5xL5mh
SjQMVYT7XewEuOHEcmMtjfSQzwbYTlvTa7IIM3Tn3JXXFwkYsbb4RyNHfLkr5SNDLQ3UPMDPL+A/KY1s
rNPyey0RDby3q++gYuWGT9+8LrIZxN3jwthOe1KhTlIE4srO8b3kMwAA//+dn1cZ7AAAAA==
`,
	},

	"/minimock/function.tmpl": {
		name:    "function.tmpl",
		local:   "minimock/function.tmpl",
		size:    2696,
		modtime: 1708028694,
		compressed: `
H4sIAAAAAAAC/6RWwW7cNhA9S18xFZJAKmQeenThQ1s4xR5qBHbQHIKiULSjrWCJ2pIjGwEx/15wKK2o
9a5tuL6sRc68IR/nPdK5LTatRsgqa9FQO+gMLpjTtoEfiNRjpenamJxKQGNS5y6gbWAwkOuBQN2N3wgt
2QLUJ9Nq2uj9SFYAAABKaHpSd3s/1eSZc4T9vqsIIevR2mqHGSjmrIR4qhUQmSmkIuqtQBbgBNYgjUan
PE8yp2m67AT/HasuYw47Utf+07mXl83cOCdw008M2tvdT5mf+d0DMMMVvH8owfMD7x/O7wAOGSUQKee+
+Ax1rkbGDCW8gakDXITXjLqWE+VA1bsGLq98cJr6KXBOfUZLN1WPzDnBj56UVu/U55lpUp8qU3UddnmR
pomQ5jGc822gfOaWua/2Xy2ZVu/+smTGmpzDziLz1+XbLw5cmiQhNZyD5BfMuuoRAsK8Dx94AY8t/QPq
FmtsH9DIcDL1YKW3oDb2TgqA+thit7UhQkJMpXcYjcOJvwlKbexGE5qmqvFEZCKRAiQn6rnL+1a3/VDf
qz+G+v63QZMZug5NIaR+35/EkXbtLMIrirwEo7enUBZBTCyEc5hImXk8KjCHRrzH/09E+k7xzdAjoQlE
v55C5yT1zfQ9x1yM/Uz2mrBnNnmLduzIzsTMel0RdpzuGbgVV7LXxgxTp07mCbMR+ZlfZpv9OOp6jcQi
Dy7ThNOkGQyIaeWDWQxr0s3G3lT3uC0KWVakRC+kWXx/T1LyvhM0G0QYthrgXLT+uYasPaQQpWu9zW6w
Kugj/e/Pzs00Jwmp21HnZxdHpKbPsERpimMHSjxMZEAxW1P71dT58od2usHHpZty8qZ13kkmLzq4yDR6
rBThzsf545fgyjB/ONwVYfzPqhuR5QzPOJBMnNdMEs2r4MmX4co4uEJeU1eUa6BZFofBZxGOk+fjOvKA
JEkWJ10bysx+vMUjX1h6amO/mJYOfCexVi+v4MO374RW/To2DRr3iorL1WeCSjN414gIlpm66rowPCWd
UudTE1kAopeQoJxa1Dm/OLXz0zfPUi+8V6SWf2etXgllbG/qTq7IvFg9D+wu5BYLfcH0/2/d6d3yUrGn
Z/XUU4AZuID4MZdwKo+fkPJfAAAA//+GVRbdiAoAAA==
`,
	},

	"/minimock/header.tmpl": {
		name:    "header.tmpl",
		local:   "minimock/header.tmpl",
		size:    142,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/0TMMQ7CMAyF4d2nsDrBQC7BxIK4gkUebYXiViGb9e6OlAi6/bL1voiM1+rQaYFl1ImU
iGo+Q9N1KwXePmRE6g941gspuz3fNkMj0mMkKbKWfatNT4dw65cB3K2AHJO2/DhSzv/6BgAA///GzMM9
jgAAAA==
`,
	},

	"/minimock/inline.tmpl": {
		name:    "inline.tmpl",
		local:   "minimock/inline.tmpl",
		size:    49,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKzMvJzEtVqq1VqK4uSc0tyEksSVVQSk7MyVFS0AOLpual1NYCAgAA
//+q60H/MQAAAA==
`,
	},

	"/minimock/inputs.tmpl": {
		name:    "inputs.tmpl",
		local:   "minimock/inputs.tmpl",
		size:    177,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/0yNMaoDMQxE+38KsWz58QECOUCaEMgJFCwvLqwESVsJ3T1YpHAlzWN4416pdSbYOn9O
0y3CfW9wuUKZb2/Ab4PyPF9GarqyOw6qEWbFnbhGMA76h1/I3t7KQzrbLeUTCvJByVFwkJFoKlAOLe5J
5/TiWc/fNwAA//94+RPrsQAAAA==
`,
	},

	"/minimock/message.tmpl": {
		name:    "message.tmpl",
		local:   "minimock/message.tmpl",
		size:    174,
		modtime: 1707860836,
		compressed: `
H4sIAAAAAAAC/zyM0QqCQBBF3/2KQRQKdD4g6AN6CYnofcmrDehiu6sRw/x7tERP93IOHNUeg3hQOSNG
N6Kk1qyon0yqL0kP4gvukA3BTJWv7wV8c9MKM1aF7zM+uxlmO1UZiLsgPp38sqb4lcH5EVRJQxUmOhyJ
OxfcjISQvQxUiVlDv1y9/bt59oVqS/l+AgAA//8oZCHjrgAAAA==
`,
	},

	"/minimock/results.tmpl": {
		name:    "results.tmpl",
		local:   "minimock/results.tmpl",
		size:    201,
		modtime: 1708031816,
		compressed: `
H4sIAAAAAAAC/1yOTQrCMBCFr/IoXYYcQHApLoXeQOhEAiGBSbqQx9xdphZFV/PzfbwZcpWUq2BS6VsZ
fTIDqff6EMw5YJaC0xlxeWMzMifM2SyAlLr65toGojfHnBPirZbnImPT2i+qTc0gqqSULnDhF4aDegD2
hKafq/+yf/R19/oKAAD//6pScXLJAAAA
`,
	},

	"/testify/call.tmpl": {
		name:    "call.tmpl",
		local:   "testify/call.tmpl",
		size:    241,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/0SOQWrDQAxFryKMFy0YHaDQA3hTSlvatRjLrsCeFo2SEITuHsY4mdWHP2/el/vEs2SG
LtG6dhHuF7FfwA9OLGfW2sgM+c8Ax/JpekoWYYbunKf6eicBI1qLb7RxxJO7Ul4Yehmg5xVeXgHfSWlj
Yy2HvZeIAR5/296PitUbzJB0KU2/K+riTuPX9Z9xLN+kQpOkCMTG7vF85C0AAP//ZQi8iPEAAAA=
`,
	},

	"/testify/function.tmpl": {
		name:    "function.tmpl",
		local:   "testify/function.tmpl",
		size:    2798,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/5xWUW/cNgx+tn8FYQTFebiq7yn60GHtkJemSIL1oRgG9UzfjPl0N4necBD43wdRlu3z
2VnTPOQsyiQ/8qM+y/sK68YgFNo5tNQcTQGvmXMiNVg2tAXvmxrUvWnPD0idNe6DtUfL7D3h4dRqQih2
um0LUMGIrUNmtNZ7NBVz7v1raGo4WtiYI4F67L4ROnIlqM+2MXRnTh05SQ0AsIX6QOrxFLbqTTHNckDn
9B4lURGAjVuNBJGdUjKiqSTksGLO83wsGv/udFswx1LVh7CUSv8HJ3PdF5bqm0Y9uH0Rdr4nDmzhB6p7
JnndmZ3Q2Df9pobbd8Enz8MWeK+e0NEnfUDmDcFPAVZj9uqpBJ9nweXfhv4E9YA7bP5By5xnWU+funOP
ZLsdiXGwfmywrVy0ZXQ+IdRiAScvh7j921abPc4cMu9lHUAKvPMJ+62RtbAacibT5Hn2GFCFMj9rqw9I
aCWZQNN2fwFsAuvaQxKK6QrdJONlfuE5NN17wRFaXTEf9OmrI9uY/e8xezolX8d1CNCDCq5xdMS/ZDb6
gBAjJOKzNb5SE7SpRtJmfe85ij9DawVSX3gKec3MCgvP9D7LpPHh34LPhIAHdF1LLuX5og091/sh5aUu
ScIkYJDOd9h7n6wfO7Ob8Rha/+YNPN3/cn8L76sKApew0w6dEprro41SuDna8VD3RN25T/ovrMpS0E6o
D8wltv/oudsCURySyHrsQAznJ2WlHBe1hta2LbbMMQjR28uRSNSnFy+gBI/w+9Z7UUjxIvXQmc0qbCLV
LyP4oCXX6rGIcHjelJcgh5O9NsQrsnM1mtJGGbvzCeVlbZlfDSoZ7b/ptkNmn0KsqFHmvYrqeAtEKh4P
NdGo7Rhg1KZsQbCuFn2+BYlJZX6xDQ3VX0jP7Tt49e1M6NTPXV2j9d+TsB+DOJ7zj3d5bb83KF0qYUA2
fn9sPJgF3NQy4PMPfzCvoZifTpj9TaNNbiKrIdf0YqmVsPA3zRcvAZIr3HSI1Kg64Qs8cKAeRXzDGE8+
2G4ffcuRj6ihy3kF3k291PUVn5find4Y2sZgfHUF8xrIZ2p4KZ5fjxTvLC8DMByt1RGfSyQwA5cwvfhl
nHO4HUWX/wIAAP//vN7yje4KAAA=
`,
	},

	"/testify/header.tmpl": {
		name:    "header.tmpl",
		local:   "testify/header.tmpl",
		size:    142,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/0TMMQ7CMAyF4d2nsDrBQC7BxIK4gkUebYXiViGb9e6OlAi6/bL1voiM1+rQaYFl1ImU
iGo+Q9N1KwXePmRE6g941gspuz3fNkMj0mMkKbKWfatNT4dw65cB3K2AHJO2/DhSzv/6BgAA///GzMM9
jgAAAA==
`,
	},

	"/testify/inline.tmpl": {
		name:    "inline.tmpl",
		local:   "testify/inline.tmpl",
		size:    49,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKzMvJzEtVqq1VqK4uSc0tyEksSVVQSk7MyVFS0AOLpual1NYCAgAA
//+q60H/MQAAAA==
`,
	},

	"/testify/inputs.tmpl": {
		name:    "inputs.tmpl",
		local:   "testify/inputs.tmpl",
		size:    177,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/0yNMaoDMQxE+38KsWz58QECOUCaEMgJFCwvLqwESVsJ3T1YpHAlzWN4416pdSbYOn9O
0y3CfW9wuUKZb2/Ab4PyPF9GarqyOw6qEWbFnbhGMA76h1/I3t7KQzrbLeUTCvJByVFwkJFoKlAOLe5J
5/TiWc/fNwAA//94+RPrsQAAAA==
`,
	},

	"/testify/message.tmpl": {
		name:    "message.tmpl",
		local:   "testify/message.tmpl",
		size:    201,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/zyN4WqDQBCE//sUiyi0oPsAhT5A/xRpS/9f4mgW9GLuTkNY9t2DB/HXDDPDN6o9BvGg
ckaMbkRJrVmhKgP5ayL+XU8JMUWz+sakCt+bqd4lXYh/cIZsCHvCf48F/O+mFWZ8DPnbzTB7y0Tugvj0
5Zd1B6oG50dQJQ1VmOjjk7hzwc1ICLmXgSoxa16/9XZws7wXqi1l+wwAAP//kC65UskAAAA=
`,
	},

	"/testify/results.tmpl": {
		name:    "results.tmpl",
		local:   "testify/results.tmpl",
		size:    168,
		modtime: 1706989864,
		compressed: `
H4sIAAAAAAAC/1yNTQrCQAyFr/Iosyw9gOBS3HsDoRkJlAy8ma5C7i6pRcFVfr4vee6rVDXBROn7NvoU
AXc+7SUoOqPIhssVy+ODI9y1omjEDHexNTf3NrBkc85a82DstH4jG1MW8uQ4hMbv0385A3/uUd8BAAD/
/7BPz2GoAAAA
`,
	},

	"/": {
		name:  "/",
		local: `./`,
		isDir: true,
	},

	"/minimock": {
		name:  "minimock",
		local: `minimock`,
		isDir: true,
	},

	"/testify": {
		name:  "testify",
		local: `testify`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./": {},

	"minimock": {
		_escData["/minimock/call.tmpl"],
		_escData["/minimock/function.tmpl"],
		_escData["/minimock/header.tmpl"],
		_escData["/minimock/inline.tmpl"],
		_escData["/minimock/inputs.tmpl"],
		_escData["/minimock/message.tmpl"],
		_escData["/minimock/results.tmpl"],
	},

	"testify": {
		_escData["/testify/call.tmpl"],
		_escData["/testify/function.tmpl"],
		_escData["/testify/header.tmpl"],
		_escData["/testify/inline.tmpl"],
		_escData["/testify/inputs.tmpl"],
		_escData["/testify/message.tmpl"],
		_escData["/testify/results.tmpl"],
	},
}
